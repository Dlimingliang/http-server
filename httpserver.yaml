# 应用上云yaml编写实现目标
# 1. 高可用
# - replicas设置为3，多副本保证一个pod挂掉不会影响整体服务.
# - 设置podAntiAffinity。保证pod被调度到多个节点上，避免节点不可用影响整体服务,这里因为本地环境只有一个节点，顾设置了软亲和性，避免pod处于pending状态.
# 2. 非root用户运行
# - securityContext 指定用户和组,并且设置不允许提升权限allowPrivilegeEscalation=false
# 3. 资源需求和Qos保证
# - httpserver为核心应用，所以qos为Guaranteed。设置资源request=limit
# 4. 升级策略
# - 设置滚动升级策略，确保在升级过程中服务不会全部不可用
# - pdb设置 保证在自愿中断的场景下服务不受影响
# 5. 配置和代码分离
# - 环境变量 httpserver里面获取了环境变量。 这里我们使用configmap设置环境变量。
# 6. 优雅启动
# - 设置startupProbe,避免应用启动过慢，确保应用没在启动之前就被kubelet重启
# - 设置readinessProbe,避免应用没有准备就绪就被接收客户端流量
# 7. 优雅终止
# - 在main.go中，捕获sigterm,然后调用服务地shutdown方法关闭所有开启的监听器，并且确保活跃连接的正常返回。处理完成之后再退出主程序。
# 8. 探活
# - 设置livenessProbe,保证应用不活地时候，kubelet重启应用
# 日常运维需求，日志等级
# 锦上添花: label更好的配置、创建新的namespace

# PDB
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: httpserver-pdb
spec:
  maxUnavailable: 25%
  selector:
    matchLabels:
      app: httpserver

---
# env configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: httpserver-env
data:
  VERSION: v1.0

---
# service
apiVersion: v1
kind: Service
metadata:
  name: httpserver
  labels:
    app: httpserver
spec:
  selector:
    app: httpserver
  ports:
    - port: 9090
      targetPort: 9090

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  labels:
    app: httpserver
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: httpserver
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: httpserver
    spec:
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - httpserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      securityContext:
        runAsUser: 5000
        runAsGroup: 5000
      containers:
        - name: httpserver
          image: limingliang/httpserver:v12.2
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9090
          env:
            - name: VERSION
              valueFrom:
                configMapKeyRef:
                  key: VERSION
                  name: httpserver-env
          securityContext:
            allowPrivilegeEscalation: false
          resources:
            requests:
              cpu: 300m
              memory: 300Mi
            limits:
              cpu: 300m
              memory: 300Mi
          startupProbe:
            httpGet:
              path: /healthz
              port: 9090
            periodSeconds: 3
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3